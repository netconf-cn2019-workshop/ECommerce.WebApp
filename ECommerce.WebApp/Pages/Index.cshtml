@page
@Html.AntiForgeryToken()
@model ECommerce.WebApp.Pages.IndexModel
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@{
    Layout = "/Pages/Shared/_Layout.cshtml";
}

<div class="container">

    <div class="jumbotron">
        <h1 class="display-4">欢迎来到 .NET Core 云原生电商应用！</h1>
        <p class="lead">这个容器化的电商应用的功能很简单，界面也十分简洁，它的后端是由几个微服务构成的。</p>
        <hr class="my-4">
        <p>这个示例的目的是为了演示如何用 .NET Core，在容器化的环境中（比如，Docker 和 Kubernetes）设计、构造并实现微服务系统。</p>
    </div>

    @if (Model.HasError)
    {
        <div class="alert alert-danger" role="alert">
            <h4 class="alert-heading">错误 :(</h4>
            <p>处理页面期间发生错误，请尝试</p>
            <hr>
            <p class="mb-0">@Model.ErrorMessage</p>
        </div>
    }

    @if (!Model.HasError)
    {
        <h1>商品</h1>

        <table class="table table-hover">
            <thead class="thead-dark">
                <tr>
                    <th scope="col">#</th>
                    <th scope="col">名称</th>
                    <th scope="col">数量</th>
                    <th scope="col">价格</th>
                    <th scope="col"></th>
                </tr>
            </thead>
            <tbody>

                @foreach (var item in Model.Products)
                {
                    <tr>
                        <th scope="row">@item.ProductId</th>
                        <td>@item.Name</td>
                        <td>@item.Quantity</td>
                        <td>@string.Format("￥{0}", item.Price)</td>
                        <td>
                            <button class="btn btn-outline-warning buyButton" value="@item.ToJson()">
                                购买
                            </button>
                        </td>
                    </tr>
                }

            </tbody>
        </table>

        <p class="small text-center">数据来源微服务：<mark>@Model.HostName</mark>，服务 Id：<mark>@Model.ServiceId</mark></p>
    }

    <script src="~/js/Index.js" defer></script>

</div>